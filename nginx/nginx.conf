http {
    lua_shared_dict jwt_verification 10m;
    lua_package_path "/etc/openresty/lua/?.lua;;";
    resolver 8.8.8.8 ipv6=off;
    server_names_hash_bucket_size 128;

    server {
        listen 80;
        server_name bug-free-space-eureka-rwjr9g97qrvf5jwx-80.app.github.dev;
        return 301 https://$http_host$request_uri;
    }
    
    server {
        listen 443 ssl http2;
        server_name bug-free-space-eureka-rwjr9g97qrvf5jwx-443.app.github.dev;

        port_in_redirect off;
        absolute_redirect off;

        ssl_certificate /usr/local/openresty/nginx/certs/nginx.crt;
        ssl_certificate_key /usr/local/openresty/nginx/certs/nginx.key;
        ssl_protocols TLSv1.2 TLSv1.3;
        ssl_ciphers HIGH:!aNULL:!MD5;
        
        location /geonetwork/ {
            proxy_pass http://geonetwork:8080/geonetwork/;
            proxy_set_header Host $http_host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            proxy_set_header X-Forwarded-Host $http_host;
            proxy_set_header X-Forwarded-Server $http_host;
            proxy_set_header X-Forwarded-Prefix /geonetwork;
            proxy_set_header Forwarded "for=$remote_addr;proto=https;host=$http_host";
            # Important: Handle base path correctly
            # rewrite ^/geonetwork(/.*)$ $1 break;
        }
        
        location /auth/ {
            proxy_pass http://keycloak:8080/auth/;
            proxy_set_header Host $http_host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            proxy_set_header X-Forwarded-Prefix /auth;
            proxy_set_header X-Forwarded-Host $http_host;
            proxy_set_header Forwarded "for=$remote_addr;proto=https;host=$http_host";
            #rewrite ^/auth(/.*)$ $1 break;
        }
        
        # Proxy for Elasticsearch
        location /elasticsearch/ {
            proxy_pass http://elasticsearch:9200/;
            proxy_set_header Host $http_host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto https;
            proxy_set_header Forwarded "for=$remote_addr;proto=https;host=$http_host";
        }
        
        # Proxy for Kibana
        location /geonetwork/dashboards/ {
            proxy_pass http://kibana:5601/geonetwork/dashboards/;
            proxy_set_header Host $http_host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto https;
            # Important: Handle base path correctly
            proxy_set_header X-Forwarded-Prefix /geonetwork/dashboards;
            proxy_set_header Forwarded "for=$remote_addr;proto=https;host=$http_host";
            rewrite ^/geonetwork/dashboards(/.*)$ $1 break;
        }

        location /echo/ {
            proxy_pass http://my-http-listener:8888/;
            proxy_set_header Host $http_host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            proxy_set_header X-Forwarded-Prefix /echo;
            proxy_set_header X-Forwarded-Host $http_host;
            proxy_set_header X-Forwarded-Server $http_host;
            proxy_set_header Forwarded "for=$remote_addr;proto=https;host=$http_host";
            #rewrite ^/echo(/.*)$ $1 break;
        }

        location /csw/ {
            access_by_lua_file /etc/openresty/lua/auth_own.lua;
            proxy_pass http://httpbin.org/anything;
        }

        location /test/ {
            access_by_lua_file /etc/openresty/lua/auth_remote.lua;
            proxy_pass http://httpbin.org/anything;
        }

        # Root redirect to GeoNetwork
        location = / {
            return 301 /geonetwork/;
        }        
    }
}

events {
    worker_connections    1024;
}